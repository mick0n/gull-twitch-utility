<!DOCTYPE html>
<html lang="en">
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta charset="UTF-8">
	<title>Gull - Twitch utility</title>
	<style>
		html {
			height: 100%;
		}
		body {
			margin: 0;
			padding: 0;
			border: 0;
			width: 100%;
			height: 100%;
			font-family: sans-serif;
			font-size: 24px;
		}

		.event-row {
			display: flex;
			width: 100%;
			min-height: 60px;
			margin-bottom: 1px;
			border-spacing: 0px;
			-webkit-transform: translateZ(0);
		}

		.event-row--title {
			flex: 0 0 150px;
			align-self: center;
			padding-left: 10px;
			font-weight: bold;
		}

		.event-row--data {
			flex: 1;
			align-self: center;
		}

		.event-row.chat {
			background-color: #ffa6f1;
		}

		.event-row.follow {
			background-color: #c3ffd0;
		}

		.event-row.viewer {
			background-color: #ffeebc;
		}
	</style>
	<script type="text/javascript" src="/pub/jquery-3.1.0.min.js"></script>
	<script type="text/javascript" src="/pub/underscore-min.js"></script>
</head>
<body>
	<div class="event-area">
	</div>
	<script type="text/template" id="event-row-template">
		<div class="event-row {{ type }}">
			<div class="event-row--title">
				{{ type }}
			</div>
			<div class="event-row--data">
				{{ message }}
			</div>
		</div>
	</script>
	<script type="text/javascript">
		_.templateSettings = {
			interpolate: /\{\{(.+?)\}\}/g
		};

		var $draggingElement, startX;

		$('body').on('mousemove touchmove', function(event) {
			if ($draggingElement) {
				event.preventDefault();
				var eventPosition = event.pageX || event.originalEvent.touches[0].pageX;
				$draggingElement.css('-webkit-transform', 'translateX(' + (eventPosition - startX) + 'px)');
			}
		});

		$('body').on('mouseup touchend', function() {
			if ($draggingElement) {
				var elementOffset = $draggingElement.css('transform').split(',')[4];
				if (Math.abs(elementOffset) > (window.innerWidth / 5)) {
					$draggingElement.remove();
				} else {
					$draggingElement.css('-webkit-transform', 'translateX(0px)');
				}
				$draggingElement = null;
				startX = null;
			}
		});

		var socket;
		function connect() {
			socket = new WebSocket('ws://' + window.location.hostname + ':<%= utilport %>');
			socket.onclose = function () {
				setTimeout(connect, 7000);
			}
			socket.onmessage = function (message) {
				var messageData = JSON.parse(message.data);
				$('.event-area').append(createRow(messageData));
				$('body').scrollTop($(document).height());
			}
		}
		connect();

		function createRow(messageData) {
			var templateFn = _.template($('#event-row-template').html());
			var $newRow = $(templateFn({type: messageData.type, message: convertMessage(messageData)}));
			$newRow.on('mousedown touchstart', function(event) {
				$draggingElement = $newRow;
				startX = event.pageX || event.originalEvent.touches[0].pageX;
			});
			return $newRow;
		}

		function send(data) {
			if (socket && socket.readyState === 1) {
				socket.send(JSON.stringify(data));
			}
		}

		function convertMessage(messageData) {
			switch (messageData.type) {
				case 'chat':
					return messageData.from + ': ' + messageData.message;
				default:
					return messageData.message;
			}
		}
	</script>
</body>
</html>